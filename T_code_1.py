# -*- coding: utf-8 -*-
"""Making the Most of your Colab Subscription

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/pro.ipynb
"""

# ===== خلية جديدة: توصيل Google Drive
from google.colab import drive
drive.mount('/content/drive')
print("✅ تم توصيل Google Drive بنجاح.")

# ===== خلية جديدة: فك ضغط بيانات التدريب
!unzip -q "/content/drive/MyDrive/2_boxing data.v1i.yolov8-obb.zip" -d /content/
print("✅ تم فك ضغط بيانات التدريب.")

# ===== خلية جديدة: إنشاء ملف data.yaml
#import yaml

#data_yaml = {
 #   'path': '/content/2_boxing data.v1i.yolov8-obb',
  #  'train': 'train/images',
   # 'val': 'valid/images',
    #'names': {
     #   0: 'Body_A',
      #  1: 'Body_B',
       # 2: 'Head_A',
        #3: 'Head_B',
#        4: 'L_Hook_Head_Landed',
 #       5: 'L_Hook_Head_Missed',
  #      6: 'L_Straight_Body_Landed',
   #     7: 'L_Straight_Head_Landed',
    #    8: 'L_Straight_Head_Missed',
     #   9: 'Player_A',
      #  10: 'Player_B',
       # 11: 'R_Hook_Head_Landed',
        #12: 'R_Hook_Head_Missed',
#        13: 'R_Straight_Head_Missed',
 #       14: 'R_Upper_Head_Landed'
  #  }
#}

#with open('/content/data.yaml', 'w') as f:
 #   yaml.dump(data_yaml, f)
#print("✅ تم إنشاء ملف data.yaml.")

"""# ✅ 3. إنشاء ملف data.yaml الجديد بناءً على البيانات الجديدة
import yaml

data_yaml = {
    'path': '/content/2_boxing data.v1i.yolov8-obb',
    'train': 'train/images',
    'val': 'valid/images',
    'names': {
        0: 'Body_A',
        1: 'Body_B',
        2: 'Head_A',
        3: 'Head_B',
        4: 'L_Hook_Head_Landed',
        5: 'L_Hook_Head_Missed',
        6: 'L_Straight_Body_Landed',
        7: 'L_Straight_Head_Landed',
        8: 'L_Straight_Head_Missed',
        9: 'Player_A',
        10: 'Player_B',
        11: 'R_Hook_Head_Landed',
        12: 'R_Hook_Head_Missed',
        13: 'R_Straight_Head_Missed'
    }
}

with open('/content/data.yaml', 'w') as f:
    yaml.dump(data_yaml, f)
print("✅ تم إنشاء ملف data.yaml")
"""

# ===== خلية جديدة: تثبيت YOLOv8
!pip install -q ultralytics
from ultralytics import YOLO
print("✅ تم تثبيت YOLOv8.")

# 1. توصيل Google Drive
from google.colab import drive
drive.mount('/content/drive')
print("✅ تم توصيل Google Drive")

# 2. فك الضغط إلى مجلد جديد مختلف عن السابق
!mkdir -p "/content/unzipped_2_boxing_dataset"
!unzip -o "/content/drive/MyDrive/2_boxing data.v1i.yolov8-obb.zip" -d "/content/unzipped_2_boxing_dataset"
print("✅ تم فك الضغط إلى مجلد unzipped_2_boxing_dataset")

# 3. تعديل مسارات ملف data.yaml
import os, yaml, glob

yaml_paths = glob.glob("/content/unzipped_2_boxing_dataset/**/data.yaml", recursive=True)

if len(yaml_paths) == 0:
    print("❌ لم يتم العثور على ملف data.yaml.")
else:
    data_yaml_path = yaml_paths[0]
    print(f"✅ تم العثور على ملف data.yaml: {data_yaml_path}")

    with open(data_yaml_path, 'r') as f:
        data_config = yaml.safe_load(f)

    base_dir = os.path.dirname(data_yaml_path)

    if 'path' in data_config:
        data_config.pop('path', None)

    for key in ['train', 'val', 'test']:
        if key in data_config and data_config[key]:
            p = data_config[key]
            if isinstance(p, str) and not p.startswith('/content'):
                if not p.startswith('/'):
                    data_config[key] = os.path.join(base_dir, p)
                else:
                    new_rel = None
                    for folder in ['/train', '/val', '/valid', '/test']:
                        if folder in p:
                            idx = p.rfind(folder)
                            if idx != -1:
                                new_rel = p[idx+1:]
                                break
                    if new_rel:
                        data_config[key] = os.path.join(base_dir, new_rel)
                    else:
                        data_config[key] = os.path.join(base_dir, os.path.basename(p))

    with open(data_yaml_path, 'w') as f:
        yaml.safe_dump(data_config, f)

    print("✅ تم تعديل data.yaml للمسارات الجديدة.")

# ===== خلية جديدة: تدريب النموذج YOLOv8 على البيانات الجديدة

from ultralytics import YOLO

# تحميل النموذج الأساسي المدرب مسبقًا
model = YOLO("yolov8n.pt")
"""
# تدريب النموذج على البيانات الجديدة
results = model.train(
    data="/content/unzipped_2_boxing_dataset/data.yaml",  # مسار data.yaml بعد التعديل
    epochs=150,
    imgsz=640,
    batch=32,
    name='yolov8_training',
    project='/content/drive/MyDrive/boxing_checkpoints',
    optimizer='SGD',
    save=True,
    save_period=5
)
"""
"""# ===== خلية جديدة: استكمال التدريب من آخر Checkpoint
model = YOLO('/content/drive/MyDrive/boxing_checkpoints/yolov8_training/weights/last.pt')
model.train(resume=True)
"""
"""
# ===== خلية جديدة: نسخ أفضل نموذج إلى final_models في Google Drive

import shutil

best_model_src = '/content/drive/MyDrive/boxing_checkpoints/yolov8_training/weights/best.pt'
best_model_dst = '/content/drive/MyDrive/boxing_checkpoints/final_models/best.pt'

shutil.copy(best_model_src, best_model_dst)
print("✅ تم نسخ النموذج الأفضل إلى final_models/best.pt")

from google.colab import drive
drive.mount('/content/drive')

from ultralytics import YOLO
import cv2
import os

# === 1. تحميل النموذج المدرب
model = YOLO('/content/drive/MyDrive/boxing_checkpoints/final_models/best.pt')

# === 2. إعداد مسارات الفيديو
input_path  = '/content/drive/MyDrive/boxing_checkpoints/00.26.00 boxing.mp4'
output_path = '/content/drive/MyDrive/boxing_checkpoints/script_1/output_combined.mp4'

cap = cv2.VideoCapture(input_path)
fps    = cap.get(cv2.CAP_PROP_FPS)
width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out    = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

# === 3. هيكل الإحصائيات
stats = {
    'A': {'landed': 0, 'thrown': 0, 'records': []},
    'B': {'landed': 0, 'thrown': 0, 'records': []}
}

# === 4. دالة رسم لوحة الإحصائيات
def draw_panel(frame, x, y, w, h, bg_color, data):
    # خلفية اللوحة
    cv2.rectangle(frame, (x, y), (x+w, y+h), bg_color, thickness=cv2.FILLED)
    # عدادات في مستطيل أبيض
    cv2.rectangle(frame, (x+10, y+10), (x+w-10, y+60), (255,255,255), thickness=cv2.FILLED)
    cv2.putText(frame, f"Landed: {data['landed']}", (x+20, y+40),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,0), 2)
    cv2.putText(frame, f"Thrown: {data['thrown']}", (x+200, y+40),
                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,0), 2)

    # عناوين الجدول
    cols = ['Time','Side','Type','Target','Status','Quality']
    col_x = [x+10, x+80, x+160, x+260, x+360, x+460]
    y_header = y + 90
    for i, title in enumerate(cols):
        cv2.putText(frame, title, (col_x[i], y_header),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 2)

    # بيانات آخر 10 ضربات
    y0 = y_header + 30
    for rec in data['records'][-10:]:
        for i, key in enumerate(['time','side','type','target','status','quality']):
            cv2.putText(frame, rec[key], (col_x[i], y0),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 1)
        y0 += 25

# === 5. حلقة المعالجة الرئيسية
frame_idx = 0
while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame)
    names   = results[0].names  # قاموس أسماء الفئات

    # أولاً: تحديث الإحصائيات ورسم المربعات + النص
    for det in results[0].boxes:
        cls_id = int(det.cls)
        x1, y1, x2, y2 = map(int, det.xyxy[0].tolist())

        # اختيار لون المربع حسب الفئة
        if cls_id == 12:        color = (0, 0, 255)     # Player_A → أحمر
        elif cls_id == 13:      color = (255, 0, 0)     # Player_B → أزرق
        elif cls_id in (0, 1):  color = (255,255,0)     # Body_A/B → أصفر
        elif cls_id in (2, 3):  color = (0,255,255)     # Head_A/B → سماوي
        else:                   color = (255,0,255)     # باقي الفئات → أرجواني

        # رسم المربع
        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)

        # إضافة نص لكل الفئات ما عدا 0–3
        if cls_id not in (0, 1, 2, 3):
            cv2.putText(frame, names[cls_id], (x1, y1-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

        # **تحديث الإحصائيات** فقط لدرجات الضربات (الفئات ≥4)
        if cls_id >= 4 and cls_id not in (12,13):
            # تحديد اللاعب حسب side (L/R)
            name = names[cls_id]
            side = name.split('_')[0]           # "L" أو "R"
            ply  = 'A' if side == 'L' else 'B'
            st   = name.split('_')[-1]          # "Landed" أو "Missed"

            # تحديث المجموع
            stats[ply]['thrown'] += 1
            if st == 'Landed':
                stats[ply]['landed'] += 1

            # حساب التوقيت بالشكل MM:SS
            secs = frame_idx / fps
            m, s = divmod(int(secs), 60)
            time_str = f"{m:02d}:{s:02d}"

            # نوع الضربة والهدف
            type_   = name.split('_')[1]        # Hook / Straight / ...
            target  = name.split('_')[2]        # Body / Head
            status  = st
            quality = '●●●' if st=='Landed' else '●'

            # إضافة سجل
            stats[ply]['records'].append({
                'time':    time_str,
                'side':    side,
                'type':    type_,
                'target':  target,
                'status':  status,
                'quality': quality
            })

    # ثانياً: رسم لوحات الإحصائيات
    panel_w, panel_h = int(0.45*width), height
    draw_panel(frame, 0, 0, panel_w, panel_h, (0,0,255), stats['A'])
    draw_panel(frame, width-panel_w, 0, panel_w, panel_h, (255,0,0), stats['B'])

    out.write(frame)
    frame_idx += 1

# تحرير الموارد
cap.release()
out.release()
cv2.destroyAllWindows()

print(f"✅ تم إنشاء الفيديو المدمج: {output_path}")

from ultralytics import YOLO
import cv2

# 1. تحميل نموذج YOLOv8 المدرب
model = YOLO('/content/drive/MyDrive/boxing_checkpoints/final_models/best.pt')

# 2. مسارات الفيديو
input_path  = '/content/drive/MyDrive/boxing_checkpoints/00.26.00 boxing.mp4'
output_path = '/content/drive/MyDrive/boxing_checkpoints/script_1/output_with_stats.mp4'

cap = cv2.VideoCapture(input_path)
fps    = cap.get(cv2.CAP_PROP_FPS)
W      = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
H      = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out    = cv2.VideoWriter(output_path, fourcc, fps, (W, H))

# 3. قائمة لتخزين سجلات الضربات
records = []

# 4. دالة لرسم لوحة الإحصائيات الموحدة (أعلى منتصف الفيديو)
def draw_stats_panel(frame, records):
    pw, ph = int(W * 0.8), 200
    px, py = (W - pw) // 2, 0
    # خلفية خضراء
    cv2.rectangle(frame, (px, py), (px+pw, py+ph), (0,128,0), thickness=cv2.FILLED)

    # عناوين الأعمدة
    cols  = ['Time','Side','Type','Target','Status','Quality']
    col_x = [px+10, px+80, px+160, px+260, px+360, px+460]
    y_h   = py + 30
    for i, title in enumerate(cols):
        cv2.putText(frame, title, (col_x[i], y_h),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255,255,255), 2)

    # عرض آخر 5 سجلات
    y0 = y_h + 30
    for rec in records[-5:]:
        for i, key in enumerate(['time','side','type','target','status','quality']):
            cv2.putText(frame, rec[key], (col_x[i], y0),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 1)
        y0 += 30

# 5. حلقة المعالجة الرئيسية
frame_idx = 0
while True:
    ret, frame = cap.read()
    if not ret:
        break

    # كشف الكائنات على الفريم
    results = model(frame)[0]
    names   = results.names

    # رسم المربعات وتسجيل الضربات
    for det in results.boxes:
        cls_id = int(det.cls)
        x1, y1, x2, y2 = map(int, det.xyxy[0].tolist())

        # اختيار لون المربع حسب الفئة
        if cls_id == 12:        color = (0, 0, 255)    # Player_A → أحمر
        elif cls_id == 13:      color = (255, 0, 0)    # Player_B → أزرق
        elif cls_id in (0,1):   color = (255,255,0)    # Body_A/B → أصفر
        elif cls_id in (2,3):   color = (0,255,255)    # Head_A/B → سماوي
        else:                   color = (255,0,255)    # باقي الفئات → أرجواني

        # رسم المربع
        cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)

        # رسم نص الليبل عدا الفئات 0–3
        if cls_id not in (0,1,2,3):
            cv2.putText(frame, names[cls_id], (x1, y1-10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

        # تسجيل الضربات للفئات ≥4 فقط
        if cls_id >= 4 and cls_id not in (12,13):
            # ثقة الكشف
            conf = float(det.conf[0]) if hasattr(det.conf, '__len__') else float(det.conf)

            # حساب عدد النجوم (حد أقصى 3)
            if conf > 0.85:       star_count = 3
            elif conf > 0.65:     star_count = 2
            elif conf > 0.55:     star_count = 1
            else:                 star_count = 0

            # بناء ريشة النجوم مع مسافات
            quality = " ".join("*" for _ in range(star_count))

            # استنباط side, type, target, status من اسم الليبل
            label = names[cls_id]              # مثال: "R_Straight_Head_Landed"
            parts = label.split('_')
            side   = parts[0]                  # 'L' أو 'R'
            type_  = parts[1]                  # 'Straight', 'Hook', 'Upper'
            target = parts[2]                  # 'Head' أو 'Body'
            status = parts[3]                  # 'Landed' أو 'Missed'

            # إعادة تعريف status بناءً على النجوم
            status = "Landed" if star_count > 0 else "Missed"

            # حساب الوقت بالشكل MM:SS
            secs = frame_idx / fps
            m, s = divmod(int(secs), 60)
            time_str = f"{m:02d}:{s:02d}"

            # إضافة سجل جديد
            records.append({
                'time':    time_str,
                'side':    side,
                'type':    type_,
                'target':  target,
                'status':  status,
                'quality': quality
            })

    # رسم لوحة الإحصائيات الموحدة في أعلى منتصف الفيديو
    draw_stats_panel(frame, records)

    # كتابة الفريم المعدّل إلى الفيديو الناتج
    out.write(frame)
    frame_idx += 1

# 6. تحرير الموارد
cap.release()
out.release()
cv2.destroyAllWindows()

print("✅ تم إنشاء الفيديو النهائي مع الرسوم والجدول في:", output_path)